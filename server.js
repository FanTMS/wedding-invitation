const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const path = require('path');
const { createClient } = require('@supabase/supabase-js');

const app = express();
const PORT = process.env.PORT || 3000;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TELEGRAM_CONFIG = {
    botToken: process.env.TELEGRAM_BOT_TOKEN || '8322419038:AAGYxQZYZMKyHW-BY-Ydkx-pVBqmwE8h1ys',
    chatId: process.env.TELEGRAM_CHAT_ID || '5394381166', // –í–∞—à Chat ID
    apiUrl: 'https://api.telegram.org/bot'
};

const SUPABASE_CONFIG = {
    url: process.env.SUPABASE_URL,
    key: process.env.SUPABASE_ANON_KEY,
    client: null
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
if (SUPABASE_CONFIG.url && SUPABASE_CONFIG.key) {
    SUPABASE_CONFIG.client = createClient(SUPABASE_CONFIG.url, SUPABASE_CONFIG.key);
    console.log('‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω');
} else {
    console.log('‚ö†Ô∏è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
}

// Middleware
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com", "https://cdnjs.cloudflare.com"],
            fontSrc: ["'self'", "https://fonts.gstatic.com", "https://cdnjs.cloudflare.com"],
            scriptSrc: ["'self'", "'unsafe-inline'", "https://cdn.jsdelivr.net"],
            imgSrc: ["'self'", "data:", "https:", "blob:"],
            connectSrc: ["'self'", "https://api.telegram.org", "https://*.supabase.co"],
            frameSrc: ["'self'", "https:"],
            objectSrc: ["'none'"],
            upgradeInsecureRequests: []
        }
    }
}));

app.use(cors());
app.use(compression());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(path.join(__dirname), {
    maxAge: '1d',
    etag: true
}));

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞
let siteConfig = {
    coupleNames: '–ò–º—è & –ò–º—è',
    weddingDate: '2025-08-15',
    timeline: [
        {
            time: '15:00',
            title: '–¶–µ—Ä–µ–º–æ–Ω–∏—è –±—Ä–∞–∫–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è',
            description: '—É–ª. [–ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏]<br>–æ—Ç–¥–µ–ª –ó–ê–ì–° [–†–∞–π–æ–Ω]',
            note: '–¢–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—Ä–∞–∫–∞'
        },
        {
            time: '16:30',
            title: '–§–æ—Ç–æ—Å–µ—Å—Å–∏—è',
            description: '–ü–∞—Ä–∫ [–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∫–∞]',
            note: '–°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è'
        },
        {
            time: '18:00',
            title: '–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –±–∞–Ω–∫–µ—Ç',
            description: '—É–ª. [–ê–¥—Ä–µ—Å –±–∞–Ω–∫–µ—Ç–∞]<br>—Ä–µ—Å—Ç–æ—Ä–∞–Ω ¬´[–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞]¬ª',
            note: '–£–∂–∏–Ω, —Ç–∞–Ω—Ü—ã –∏ –≤–µ—Å–µ–ª—å–µ –¥–æ —É—Ç—Ä–∞'
        }
    ],
    restaurant: {
        name: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
        address: '–≥. –ì–æ—Ä–æ–¥, —É–ª. –ê–¥—Ä–µ—Å',
        phone: '+7 (XXX) XXX-XX-XX'
    },
    deadline: '10 –∞–≤–≥—É—Å—Ç–∞ 2025',
    contact: {
        phone: '+7 (XXX) XXX-XX-XX',
        telegram: '@username'
    },
    quote: {
        text: '–õ—é–±–æ–≤—å –Ω–µ –≤ —Ç–æ–º, —á—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞,<br>–∞ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –≤–º–µ—Å—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏',
        author: '‚Äî –ê–Ω—Ç—É–∞–Ω –¥–µ –°–µ–Ω—Ç-–≠–∫–∑—é–ø–µ—Ä–∏'
    },
    images: {
        couple: null,
        restaurant: null,
        heroPhoto1: null,
        heroPhoto2: null,
        heroMainPhoto: null
    },
    virtualTour: {
        enabled: false,
        url: null
    }
};

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(chatId, message) {
    const url = `${TELEGRAM_CONFIG.apiUrl}${TELEGRAM_CONFIG.botToken}/sendMessage`;
    
    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: chatId,
                text: message,
                parse_mode: 'HTML'
            })
        });
        
        return response.ok;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
        return false;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async function handleBotCommand(chatId, command, value) {
    console.log(`–ö–æ–º–∞–Ω–¥–∞ –æ—Ç ${chatId}: ${command} ${value || ''}`);
    
    switch (command) {
        case '/start':
        case '/menu':
            return await sendBotMenu(chatId);
            
        case '/help':
            return await sendBotHelp(chatId);
            
        case '/status':
            return await sendSiteStatus(chatId);
            
        case '/names':
            if (!value) {
                return await sendTelegramMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º–µ–Ω–∞: /names –ê–Ω–Ω–∞ & –ú–∏—Ö–∞–∏–ª');
            }
            siteConfig.coupleNames = value;
            await saveSiteConfig();
            return await sendTelegramMessage(chatId, `‚úÖ –ò–º–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${value}`);
            
        case '/date':
            if (!value || !isValidDate(value)) {
                return await sendTelegramMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD: /date 2025-08-15');
            }
            siteConfig.weddingDate = value;
            await saveSiteConfig();
            const formattedDate = new Date(value).toLocaleDateString('ru-RU');
            return await sendTelegramMessage(chatId, `‚úÖ –î–∞—Ç–∞ —Å–≤–∞–¥—å–±—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${formattedDate}`);
            
        case '/restaurant':
            if (!value) {
                return await sendTelegramMessage(chatId, '‚ùå –§–æ—Ä–º–∞—Ç: /restaurant –ù–∞–∑–≤–∞–Ω–∏–µ|–ê–¥—Ä–µ—Å|–¢–µ–ª–µ—Ñ–æ–Ω');
            }
            const parts = value.split('|');
            if (parts.length !== 3) {
                return await sendTelegramMessage(chatId, '‚ùå –ù—É–∂–Ω–æ 3 —á–∞—Å—Ç–∏ —á–µ—Ä–µ–∑ |: –ù–∞–∑–≤–∞–Ω–∏–µ|–ê–¥—Ä–µ—Å|–¢–µ–ª–µ—Ñ–æ–Ω');
            }
            siteConfig.restaurant = {
                name: parts[0].trim(),
                address: parts[1].trim(),
                phone: parts[2].trim()
            };
            await saveSiteConfig();
            return await sendTelegramMessage(chatId, `‚úÖ –†–µ—Å—Ç–æ—Ä–∞–Ω –æ–±–Ω–æ–≤–ª–µ–Ω:\n${siteConfig.restaurant.name}\n${siteConfig.restaurant.address}\n${siteConfig.restaurant.phone}`);
            
        case '/deadline':
            if (!value) {
                return await sendTelegramMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω: /deadline 10 –∞–≤–≥—É—Å—Ç–∞ 2025');
            }
            siteConfig.deadline = value;
            await saveSiteConfig();
            return await sendTelegramMessage(chatId, `‚úÖ –î–µ–¥–ª–∞–π–Ω –æ–±–Ω–æ–≤–ª–µ–Ω: ${value}`);
            
        case '/contact':
            if (!value) {
                return await sendTelegramMessage(chatId, '‚ùå –§–æ—Ä–º–∞—Ç: /contact +7(999)123-45-67|@username');
            }
            const contactParts = value.split('|');
            if (contactParts.length !== 2) {
                return await sendTelegramMessage(chatId, '‚ùå –ù—É–∂–Ω–æ 2 —á–∞—Å—Ç–∏ —á–µ—Ä–µ–∑ |: –¢–µ–ª–µ—Ñ–æ–Ω|Telegram');
            }
            siteConfig.contact = {
                phone: contactParts[0].trim(),
                telegram: contactParts[1].trim()
            };
            await saveSiteConfig();
            return await sendTelegramMessage(chatId, `‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n${siteConfig.contact.phone}\n${siteConfig.contact.telegram}`);
            
        case '/quote':
            if (!value) {
                return await sendTelegramMessage(chatId, '‚ùå –§–æ—Ä–º–∞—Ç: /quote –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã|‚Äî –ê–≤—Ç–æ—Ä');
            }
            const quoteParts = value.split('|');
            if (quoteParts.length !== 2) {
                return await sendTelegramMessage(chatId, '‚ùå –ù—É–∂–Ω–æ 2 —á–∞—Å—Ç–∏ —á–µ—Ä–µ–∑ |: –¢–µ–∫—Å—Ç|–ê–≤—Ç–æ—Ä');
            }
            siteConfig.quote = {
                text: quoteParts[0].trim(),
                author: quoteParts[1].trim()
            };
            await saveSiteConfig();
            return await sendTelegramMessage(chatId, `‚úÖ –¶–∏—Ç–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n"${siteConfig.quote.text}"\n${siteConfig.quote.author}`);
            
        case '/tour':
            if (!value) {
                return await sendTelegramMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ URL –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç—É—Ä–∞: /tour https://example.com/tour');
            }
            siteConfig.virtualTour = {
                enabled: true,
                url: value
            };
            await saveSiteConfig();
            return await sendTelegramMessage(chatId, `‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—É—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${value}`);
            
        case '/preview':
            const siteUrl = process.env.SITE_URL || `http://localhost:${PORT}`;
            return await sendTelegramMessage(chatId, `üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à —Å–∞–π—Ç:</b>\n${siteUrl}\n\nüí° –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
            
        case '/backup':
            const backup = JSON.stringify(siteConfig, null, 2);
            return await sendTelegramMessage(chatId, `üíæ <b>–†–ï–ó–ï–†–í–ù–ê–Ø –ö–û–ü–ò–Ø –ù–ê–°–¢–†–û–ï–ö</b>\n\n<code>${backup}</code>\n\nüí° –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è`);
            
        default:
            return await sendTelegramMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async function sendBotMenu(chatId) {
    const menuMessage = `
üéâ <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –°–í–ê–î–ï–ë–ù–´–ú –°–ê–ô–¢–û–ú</b>

üìù <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/names [–ò–º—è & –ò–º—è] - –∏–∑–º–µ–Ω–∏—Ç—å –∏–º–µ–Ω–∞ –º–æ–ª–æ–¥–æ–∂–µ–Ω–æ–≤
/date [YYYY-MM-DD] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É —Å–≤–∞–¥—å–±—ã
/restaurant [–Ω–∞–∑–≤–∞–Ω–∏–µ|–∞–¥—Ä–µ—Å|—Ç–µ–ª–µ—Ñ–æ–Ω] - –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω
/deadline [–¥–∞—Ç–∞] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω –æ—Ç–≤–µ—Ç–æ–≤

üì∏ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:</b>
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é:
‚Ä¢ couple - —Ñ–æ—Ç–æ –ø–∞—Ä—ã (—Ñ—É—Ç–µ—Ä)
‚Ä¢ restaurant - —Ñ–æ—Ç–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
‚Ä¢ hero1 - —Ñ–æ–Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ 1 (–≥–ª–∞–≤–Ω–∞—è)
‚Ä¢ hero2 - —Ñ–æ–Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ 2 (–≥–ª–∞–≤–Ω–∞—è)
‚Ä¢ heromain - –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ (–≥–ª–∞–≤–Ω–∞—è)

üèõÔ∏è <b>–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—É—Ä:</b>
/tour [URL] - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—É—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞

üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>
/contact [—Ç–µ–ª–µ—Ñ–æ–Ω|telegram] - –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã

üí¨ <b>–¶–∏—Ç–∞—Ç–∞:</b>
/quote [—Ç–µ–∫—Å—Ç|–∞–≤—Ç–æ—Ä] - –∏–∑–º–µ–Ω–∏—Ç—å —Ü–∏—Ç–∞—Ç—É

üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>
/status - —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/preview - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç
/backup - —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞

<i>–ü—Ä–∏–º–µ—Ä: /names –ê–Ω–Ω–∞ & –ú–∏—Ö–∞–∏–ª</i>
    `;
    
    return await sendTelegramMessage(chatId, menuMessage);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏
async function sendBotHelp(chatId) {
    const helpMessage = `
üìñ <b>–ü–û–î–†–û–ë–ù–ê–Ø –°–ü–†–ê–í–ö–ê</b>

<b>1. –ò–º–µ–Ω–∞ –º–æ–ª–æ–¥–æ–∂–µ–Ω–æ–≤:</b>
/names –ê–Ω–Ω–∞ & –ú–∏—Ö–∞–∏–ª

<b>2. –î–∞—Ç–∞ —Å–≤–∞–¥—å–±—ã:</b>
/date 2025-08-15

<b>3. –†–µ—Å—Ç–æ—Ä–∞–Ω (—á–µ—Ä–µ–∑ |):</b>
/restaurant –ó–æ–ª–æ—Ç–æ–π –∑–∞–ª|–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è 1|+7 (495) 123-45-67

<b>4. –î–µ–¥–ª–∞–π–Ω –æ—Ç–≤–µ—Ç–æ–≤:</b>
/deadline 10 –∞–≤–≥—É—Å—Ç–∞ 2025

<b>5. –ö–æ–Ω—Ç–∞–∫—Ç—ã (—á–µ—Ä–µ–∑ |):</b>
/contact +7 (999) 123-45-67|@username

<b>6. –¶–∏—Ç–∞—Ç–∞ (—á–µ—Ä–µ–∑ |):</b>
/quote –õ—é–±–æ–≤—å - —ç—Ç–æ...|‚Äî –ê–≤—Ç–æ—Ä

<b>7. –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—É—Ä:</b>
/tour https://your-tour-url.com

<b>8. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ:</b>
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é:
- "couple" - —Ñ–æ—Ç–æ –ø–∞—Ä—ã
- "restaurant" - —Ñ–æ—Ç–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
- "hero1", "hero2", "heromain" - —Ñ–æ—Ç–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

<b>–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/status - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/preview - –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç
/backup - —Å–∫–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    `;
    
    return await sendTelegramMessage(chatId, helpMessage);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∞–π—Ç–∞
async function sendSiteStatus(chatId) {
    const statusMessage = `
üìä <b>–¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò –°–ê–ô–¢–ê</b>

üë• <b>–ú–æ–ª–æ–¥–æ–∂–µ–Ω—ã:</b> ${siteConfig.coupleNames}
üìÖ <b>–î–∞—Ç–∞ —Å–≤–∞–¥—å–±—ã:</b> ${siteConfig.weddingDate}
üèõÔ∏è <b>–†–µ—Å—Ç–æ—Ä–∞–Ω:</b> ${siteConfig.restaurant.name}
üìç <b>–ê–¥—Ä–µ—Å:</b> ${siteConfig.restaurant.address}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:</b> ${siteConfig.restaurant.phone}
‚è∞ <b>–î–µ–¥–ª–∞–π–Ω –æ—Ç–≤–µ—Ç–æ–≤:</b> ${siteConfig.deadline}

üì± <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>
–¢–µ–ª–µ—Ñ–æ–Ω: ${siteConfig.contact.phone}
Telegram: ${siteConfig.contact.telegram}

üí¨ <b>–¶–∏—Ç–∞—Ç–∞:</b> ${siteConfig.quote.author}

üñºÔ∏è <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b>
–§–æ—Ç–æ –ø–∞—Ä—ã: ${siteConfig.images.couple ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ' : '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}
–§–æ—Ç–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: ${siteConfig.images.restaurant ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ' : '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}
Hero —Ñ–æ—Ç–æ 1: ${siteConfig.images.heroPhoto1 ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ' : '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}
Hero —Ñ–æ—Ç–æ 2: ${siteConfig.images.heroPhoto2 ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ' : '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}
–ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ: ${siteConfig.images.heroMainPhoto ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ' : '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}

üèõÔ∏è <b>–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—É—Ä:</b> ${siteConfig.virtualTour.enabled ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
    `;
    
    return await sendTelegramMessage(chatId, statusMessage);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
async function handlePhotoUpload(chatId, photos, caption) {
    const photoType = caption.toLowerCase().trim();
    const validTypes = ['couple', 'restaurant', 'hero1', 'hero2', 'heromain'];
    
    if (!validTypes.includes(photoType)) {
        return await sendTelegramMessage(chatId, `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–æ—Ç–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n- couple (—Ñ–æ—Ç–æ –ø–∞—Ä—ã)\n- restaurant (—Ñ–æ—Ç–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞)\n- hero1 (—Ñ–æ–Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ 1)\n- hero2 (—Ñ–æ–Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ 2)\n- heromain (–≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ)`);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    const largestPhoto = photos[photos.length - 1];
    const fileUrl = `${TELEGRAM_CONFIG.apiUrl}${TELEGRAM_CONFIG.botToken}/getFile?file_id=${largestPhoto.file_id}`;
    
    try {
        const response = await fetch(fileUrl);
        const fileData = await response.json();
        
        if (fileData.ok) {
            const imageUrl = `https://api.telegram.org/file/bot${TELEGRAM_CONFIG.botToken}/${fileData.result.file_path}`;
            
            // –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            const photoMapping = {
                'couple': 'couple',
                'restaurant': 'restaurant',
                'hero1': 'heroPhoto1',
                'hero2': 'heroPhoto2',
                'heromain': 'heroMainPhoto'
            };
            
            siteConfig.images[photoMapping[photoType]] = imageUrl;
            await saveSiteConfig();
            
            const photoNames = {
                'couple': '–ø–∞—Ä—ã',
                'restaurant': '—Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
                'hero1': '—Ñ–æ–Ω–æ–≤–æ–µ 1',
                'hero2': '—Ñ–æ–Ω–æ–≤–æ–µ 2',
                'heromain': '–≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ'
            };
            
            return await sendTelegramMessage(chatId, `‚úÖ –§–æ—Ç–æ ${photoNames[photoType]} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:', error);
        return await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async function saveSiteConfig() {
    if (SUPABASE_CONFIG.client) {
        try {
            const { error } = await SUPABASE_CONFIG.client
                .from('site_config')
                .upsert([{
                    id: 1,
                    config: siteConfig,
                    updated_at: new Date().toISOString()
                }]);
            
            if (error) throw error;
            console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Supabase');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase:', error);
        }
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async function loadSiteConfig() {
    if (SUPABASE_CONFIG.client) {
        try {
            const { data, error } = await SUPABASE_CONFIG.client
                .from('site_config')
                .select('*')
                .single();
            
            if (data && data.config) {
                siteConfig = { ...siteConfig, ...data.config };
                console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ Supabase');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Supabase, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function isValidDate(dateString) {
    const date = new Date(dateString);
    return date instanceof Date && !isNaN(date);
}

// Webhook –¥–ª—è Telegram
app.post('/webhook/telegram', async (req, res) => {
    console.log('Telegram webhook received:', JSON.stringify(req.body, null, 2));
    
    try {
        const update = req.body;
        
        if (update.message) {
            const message = update.message;
            const chatId = message.chat.id;
            const text = message.text;
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if (text && text.startsWith('/')) {
                const parts = text.split(' ');
                const command = parts[0];
                const value = parts.slice(1).join(' ');
                
                await handleBotCommand(chatId, command, value);
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            if (message.photo && message.caption) {
                await handlePhotoUpload(chatId, message.photo, message.caption);
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≥–æ—Å—Ç–µ–π (–µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–æ—Ç)
            if (text && !text.startsWith('/')) {
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                await sendTelegramMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–æ–º. –ù–∞–ø–∏—à–∏—Ç–µ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
            }
        }
        
        res.status(200).json({ ok: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞
app.get('/api/config', (req, res) => {
    res.json(siteConfig);
});

// API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≥–æ—Å—Ç—è
app.post('/api/rsvp', async (req, res) => {
    try {
        const { fullName, phone, attendance, guestName, message } = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!fullName || !attendance) {
            return res.status(400).json({ error: '–ò–º—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }
        
        const responseData = {
            full_name: fullName,
            phone: phone || null,
            attendance: attendance,
            guest_name: guestName || null,
            message: message || null,
            created_at: new Date().toISOString()
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if (SUPABASE_CONFIG.client) {
            const { error } = await SUPABASE_CONFIG.client
                .from('wedding_responses')
                .insert([responseData]);
            
            if (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase:', error);
                return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞' });
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        const telegramMessage = formatGuestResponse(responseData);
        await sendTelegramMessage(TELEGRAM_CONFIG.chatId, telegramMessage);
        
        res.json({ success: true, message: '–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ RSVP:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
app.get('/api/responses', async (req, res) => {
    try {
        if (!SUPABASE_CONFIG.client) {
            return res.json({ total: 0, responses: [] });
        }
        
        const { data, error } = await SUPABASE_CONFIG.client
            .from('wedding_responses')
            .select('*')
            .order('created_at', { ascending: false });
        
        if (error) throw error;
        
        res.json({
            total: data.length,
            responses: data,
            stats: {
                coming: data.filter(r => r.attendance === 'yes').length,
                withGuest: data.filter(r => r.attendance === 'with-guest').length,
                notComing: data.filter(r => r.attendance === 'no').length
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö' });
    }
});

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≥–æ—Å—Ç—è –¥–ª—è Telegram
function formatGuestResponse(data) {
    const attendanceText = {
        'yes': '‚úÖ –ë—É–¥—É –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å',
        'with-guest': 'üë• –ü—Ä–∏–¥—É —Å –≥–æ—Å—Ç–µ–º (+1)',
        'no': '‚ùå –ù–µ —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏'
    };
    
    let message = `üéâ <b>–ù–û–í–´–ô –û–¢–í–ï–¢ –ù–ê –°–í–ê–î–ï–ë–ù–û–ï –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï</b>\n\n`;
    message += `üë§ <b>–ò–º—è:</b> ${data.full_name}\n`;
    
    if (data.phone) {
        message += `üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${data.phone}\n`;
    }
    
    message += `üìã <b>–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ:</b> ${attendanceText[data.attendance]}\n`;
    
    if (data.guest_name && data.attendance === 'with-guest') {
        message += `üë• <b>–ò–º—è –≥–æ—Å—Ç—è:</b> ${data.guest_name}\n`;
    }
    
    if (data.message) {
        message += `üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${data.message}\n`;
    }
    
    message += `\n‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date(data.created_at).toLocaleString('ru-RU')}`;
    
    return message;
}

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook Telegram
app.post('/api/setup-webhook', async (req, res) => {
    try {
        const webhookUrl = `${req.protocol}://${req.get('host')}/webhook/telegram`;
        const url = `${TELEGRAM_CONFIG.apiUrl}${TELEGRAM_CONFIG.botToken}/setWebhook`;
        
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                url: webhookUrl
            })
        });
        
        const result = await response.json();
        
        if (result.ok) {
            console.log('‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', webhookUrl);
            res.json({ success: true, webhookUrl, result });
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', result);
            res.status(400).json({ success: false, error: result });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
app.get('/health', (req, res) => {
    res.status(200).json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        telegram: {
            configured: !!TELEGRAM_CONFIG.botToken,
            botToken: TELEGRAM_CONFIG.botToken ? 'Configured' : 'Not configured'
        },
        supabase: {
            configured: !!SUPABASE_CONFIG.client,
            url: SUPABASE_CONFIG.url ? 'Configured' : 'Not configured'
        }
    });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (SPA fallback)
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('Server error:', err);
    res.status(500).json({
        error: 'Internal Server Error',
        message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'
    });
});

// Polling –¥–ª—è Telegram –±–æ—Ç–∞ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
let lastUpdateId = 0;

async function startTelegramPolling() {
    console.log('ü§ñ –ó–∞–ø—É—Å–∫ Telegram polling...');
    
    setInterval(async () => {
        try {
            const response = await fetch(`${TELEGRAM_CONFIG.apiUrl}${TELEGRAM_CONFIG.botToken}/getUpdates?offset=${lastUpdateId + 1}&timeout=10`);
            const result = await response.json();
            
            if (result.ok && result.result.length > 0) {
                for (const update of result.result) {
                    lastUpdateId = update.update_id;
                    
                    if (update.message) {
                        const message = update.message;
                        const chatId = message.chat.id;
                        const text = message.text;
                        
                        console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${chatId}: ${text}`);
                        
                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                        if (text && text.startsWith('/')) {
                            const parts = text.split(' ');
                            const command = parts[0];
                            const value = parts.slice(1).join(' ');
                            
                            await handleBotCommand(chatId, command, value);
                        }
                        
                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                        if (message.photo && message.caption) {
                            await handlePhotoUpload(chatId, message.photo, message.caption);
                        }
                        
                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                        if (text && !text.startsWith('/')) {
                            await sendTelegramMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–æ–º. –ù–∞–ø–∏—à–∏—Ç–µ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
                        }
                    }
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ polling:', error);
        }
    }, 2000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
    console.log(`üéâ Wedding invitation site is running on port ${PORT}`);
    console.log(`üåê Access at: http://localhost:${PORT}`);
    console.log(`üì± Telegram bot: ${TELEGRAM_CONFIG.botToken ? 'Configured' : 'Not configured'}`);
    console.log(`üóÑÔ∏è Supabase: ${SUPABASE_CONFIG.url ? 'Configured' : 'Not configured'}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await loadSiteConfig();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º polling –¥–ª—è –±–æ—Ç–∞
    if (TELEGRAM_CONFIG.botToken) {
        await startTelegramPolling();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        setTimeout(async () => {
            await sendTelegramMessage(TELEGRAM_CONFIG.chatId, 'ü§ñ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–æ–º.');
        }, 3000);
    }
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('SIGTERM received, shutting down gracefully');
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('SIGINT received, shutting down gracefully');
    process.exit(0);
});