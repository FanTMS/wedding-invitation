const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const path = require('path');
const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');

const app = express();
const PORT = process.env.PORT || 3000;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TELEGRAM_CONFIG = {
    botToken: process.env.TELEGRAM_BOT_TOKEN || '8322419038:AAGYxQZYZMKyHW-BY-Ydkx-pVBqmwE8h1ys',
    chatId: process.env.TELEGRAM_CHAT_ID || '5394381166', // –í–∞—à Chat ID
    apiUrl: 'https://api.telegram.org/bot'
};

const SUPABASE_CONFIG = {
    url: process.env.SUPABASE_URL,
    key: process.env.SUPABASE_SERVICE_KEY || process.env.SUPABASE_ANON_KEY,
    client: null,
    usingServiceKey: !!process.env.SUPABASE_SERVICE_KEY
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
if (SUPABASE_CONFIG.url && SUPABASE_CONFIG.key) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å REST API URL, –∞ –Ω–µ PostgreSQL)
        if (SUPABASE_CONFIG.url.includes('postgresql://')) {
            console.error('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π SUPABASE_URL! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ REST API URL, –∞ –Ω–µ PostgreSQL URL');
            console.log('üí° –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: https://your-project.supabase.co');
            console.log('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:', SUPABASE_CONFIG.url);
        } else {
            SUPABASE_CONFIG.client = createClient(SUPABASE_CONFIG.url, SUPABASE_CONFIG.key);
            console.log('‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω:', SUPABASE_CONFIG.url, '| –†–µ–∂–∏–º:', SUPABASE_CONFIG.usingServiceKey ? 'service_role' : 'anon');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error.message);
    }
} else {
    console.log('‚ö†Ô∏è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
}

// Middleware
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com", "https://cdnjs.cloudflare.com"],
            fontSrc: ["'self'", "https://fonts.gstatic.com", "https://cdnjs.cloudflare.com"],
            scriptSrc: ["'self'", "'unsafe-inline'", "https://cdn.jsdelivr.net"],
            // –†–∞–∑—Ä–µ—à–∞–µ–º inline-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, onclick) –¥–ª—è admin/index —Å—Ç—Ä–∞–Ω–∏—Ü
            scriptSrcAttr: ["'unsafe-inline'"],
            imgSrc: ["'self'", "data:", "https:", "blob:"],
            connectSrc: ["'self'", "https://api.telegram.org", "https://*.supabase.co"],
            frameSrc: ["'self'", "https:"],
            objectSrc: ["'none'"],
            upgradeInsecureRequests: []
        }
    }
}));

app.use(cors());
app.use(compression());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –î–æ–±–∞–≤–ª—è–µ–º multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const multer = require('multer');
const upload = multer({ 
    storage: multer.memoryStorage(),
    limits: {
        fileSize: 10 * 1024 * 1024 // 10MB
    },
    fileFilter: (req, file, cb) => {
        if (file.mimetype.startsWith('image/')) {
            cb(null, true);
        } else {
            cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã!'), false);
        }
    }
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(path.join(__dirname), {
    maxAge: '1d',
    etag: true
}));

// –û—Ç–¥–∞—ë–º —Å—Ç–∞—Ç–∏–∫—É –∏–∑ /uploads –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
app.use('/uploads', express.static(path.join(__dirname, 'uploads'), {
    maxAge: '7d',
    etag: true
}));

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞ (–±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ –ë–î)
let siteConfig = {
    coupleNames: '–ò–º—è & –ò–º—è',
    weddingDate: '2025-08-15',
    timeline: [],
    restaurant: {
        name: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
        address: '–≥. –ì–æ—Ä–æ–¥, —É–ª. –ê–¥—Ä–µ—Å',
        phone: '+7 (XXX) XXX-XX-XX'
    },
    deadline: '10 –∞–≤–≥—É—Å—Ç–∞ 2025',
    contact: {
        phone: '+7 (XXX) XXX-XX-XX',
        telegram: '@username'
    },
    quote: {
        text: '–õ—é–±–æ–≤—å –Ω–µ –≤ —Ç–æ–º, —á—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞,<br>–∞ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –≤–º–µ—Å—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏',
        author: '‚Äî –ê–Ω—Ç—É–∞–Ω –¥–µ –°–µ–Ω—Ç-–≠–∫–∑—é–ø–µ—Ä–∏'
    },
    images: {
        couple: null,
        restaurant: null,
        heroPhoto1: null,
        heroPhoto2: null,
        heroMainPhoto: null
    },
    virtualTour: {
        enabled: false,
        url: null
    },
    guestGroup: {
        enabled: false,
        url: null,
        inviteMessage: '–í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É, –º—ã —Ä–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ –æ–±—â–µ–π –≥—Ä—É–ø–ø–µ —Å–æ –≤—Å–µ–º–∏ –≥–æ—Å—Ç—è–º–∏: {GROUP_URL}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–æ–±–∞–≤–ª—è–π—Ç–µ—Å—å, —á—Ç–æ–± –º—ã –º–æ–≥–ª–∏ –≤–∞—Å —É–≤–∏–¥–µ—Ç—å.'
    }
};

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(chatId, message) {
    const url = `${TELEGRAM_CONFIG.apiUrl}${TELEGRAM_CONFIG.botToken}/sendMessage`;
    
    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: chatId,
                text: message,
                parse_mode: 'HTML'
            })
        });
        
        return response.ok;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
        return false;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async function handleBotCommand(chatId, command, value) {
    console.log(`–ö–æ–º–∞–Ω–¥–∞ –æ—Ç ${chatId}: ${command} ${value || ''}`);
    
    switch (command) {
        case '/start':
        case '/menu':
            return await sendBotMenu(chatId);
            
        case '/test':
            return await sendTelegramMessage(chatId, 'ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.');
            
        case '/help':
            return await sendBotHelp(chatId);
            
        case '/status':
            return await sendSiteStatus(chatId);
            
        case '/names':
            if (!value) {
                return await sendTelegramMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º–µ–Ω–∞: /names –ê–Ω–Ω–∞ & –ú–∏—Ö–∞–∏–ª');
            }
            siteConfig.coupleNames = value;
            await saveSiteConfig();
            return await sendTelegramMessage(chatId, `‚úÖ –ò–º–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${value}`);
            
        case '/date':
            if (!value || !isValidDate(value)) {
                return await sendTelegramMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD: /date 2025-08-15');
            }
            siteConfig.weddingDate = value;
            await saveSiteConfig();
            const formattedDate = new Date(value).toLocaleDateString('ru-RU');
            return await sendTelegramMessage(chatId, `‚úÖ –î–∞—Ç–∞ —Å–≤–∞–¥—å–±—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${formattedDate}`);
            
        case '/restaurant':
            if (!value) {
                return await sendTelegramMessage(chatId, '‚ùå –§–æ—Ä–º–∞—Ç: /restaurant –ù–∞–∑–≤–∞–Ω–∏–µ|–ê–¥—Ä–µ—Å|–¢–µ–ª–µ—Ñ–æ–Ω');
            }
            const parts = value.split('|');
            if (parts.length !== 3) {
                return await sendTelegramMessage(chatId, '‚ùå –ù—É–∂–Ω–æ 3 —á–∞—Å—Ç–∏ —á–µ—Ä–µ–∑ |: –ù–∞–∑–≤–∞–Ω–∏–µ|–ê–¥—Ä–µ—Å|–¢–µ–ª–µ—Ñ–æ–Ω');
            }
            siteConfig.restaurant = {
                name: parts[0].trim(),
                address: parts[1].trim(),
                phone: parts[2].trim()
            };
            await saveSiteConfig();
            return await sendTelegramMessage(chatId, `‚úÖ –†–µ—Å—Ç–æ—Ä–∞–Ω –æ–±–Ω–æ–≤–ª–µ–Ω:\n${siteConfig.restaurant.name}\n${siteConfig.restaurant.address}\n${siteConfig.restaurant.phone}`);
            
        case '/deadline':
            if (!value) {
                return await sendTelegramMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω: /deadline 10 –∞–≤–≥—É—Å—Ç–∞ 2025');
            }
            siteConfig.deadline = value;
            await saveSiteConfig();
            return await sendTelegramMessage(chatId, `‚úÖ –î–µ–¥–ª–∞–π–Ω –æ–±–Ω–æ–≤–ª–µ–Ω: ${value}`);
            
        case '/contact':
            if (!value) {
                return await sendTelegramMessage(chatId, '‚ùå –§–æ—Ä–º–∞—Ç: /contact +7(999)123-45-67|@username');
            }
            const contactParts = value.split('|');
            if (contactParts.length !== 2) {
                return await sendTelegramMessage(chatId, '‚ùå –ù—É–∂–Ω–æ 2 —á–∞—Å—Ç–∏ —á–µ—Ä–µ–∑ |: –¢–µ–ª–µ—Ñ–æ–Ω|Telegram');
            }
            siteConfig.contact = {
                phone: contactParts[0].trim(),
                telegram: contactParts[1].trim()
            };
            await saveSiteConfig();
            return await sendTelegramMessage(chatId, `‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n${siteConfig.contact.phone}\n${siteConfig.contact.telegram}`);
            
        case '/quote':
            if (!value) {
                return await sendTelegramMessage(chatId, '‚ùå –§–æ—Ä–º–∞—Ç: /quote –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã|‚Äî –ê–≤—Ç–æ—Ä');
            }
            const quoteParts = value.split('|');
            if (quoteParts.length !== 2) {
                return await sendTelegramMessage(chatId, '‚ùå –ù—É–∂–Ω–æ 2 —á–∞—Å—Ç–∏ —á–µ—Ä–µ–∑ |: –¢–µ–∫—Å—Ç|–ê–≤—Ç–æ—Ä');
            }
            siteConfig.quote = {
                text: quoteParts[0].trim(),
                author: quoteParts[1].trim()
            };
            await saveSiteConfig();
            return await sendTelegramMessage(chatId, `‚úÖ –¶–∏—Ç–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n"${siteConfig.quote.text}"\n${siteConfig.quote.author}`);
            
        case '/tour':
            if (!value) {
                return await sendTelegramMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ URL –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç—É—Ä–∞: /tour https://example.com/tour');
            }
            siteConfig.virtualTour = {
                enabled: true,
                url: value
            };
            await saveSiteConfig();
            return await sendTelegramMessage(chatId, `‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—É—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${value}`);
            
        case '/preview':
            const siteUrl = process.env.SITE_URL || `http://localhost:${PORT}`;
            return await sendTelegramMessage(chatId, `üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à —Å–∞–π—Ç:</b>\n${siteUrl}\n\nüí° –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
            
        case '/group':
            if (!value) {
                return await sendTelegramMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É: /group https://t.me/your_group');
            }
            siteConfig.guestGroup = {
                enabled: true,
                url: value,
                inviteMessage: '–í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É, –º—ã —Ä–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ –æ–±—â–µ–π –≥—Ä—É–ø–ø–µ —Å–æ –≤—Å–µ–º–∏ –≥–æ—Å—Ç—è–º–∏: {GROUP_URL}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–æ–±–∞–≤–ª—è–π—Ç–µ—Å—å, —á—Ç–æ–± –º—ã –º–æ–≥–ª–∏ –≤–∞—Å —É–≤–∏–¥–µ—Ç—å.'
            };
            await saveSiteConfig();
            return await sendTelegramMessage(chatId, `‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –≥–æ—Å—Ç–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: ${value}\n\nüí° –¢–µ–ø–µ—Ä—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ RSVP –≥–æ—Å—Ç—é –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É.`);
            
        case '/backup':
            const backup = JSON.stringify(siteConfig, null, 2);
            return await sendTelegramMessage(chatId, `üíæ <b>–†–ï–ó–ï–†–í–ù–ê–Ø –ö–û–ü–ò–Ø –ù–ê–°–¢–†–û–ï–ö</b>\n\n<code>${backup}</code>\n\nüí° –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è`);
            
        default:
            return await sendTelegramMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async function sendBotMenu(chatId) {
    const menuMessage = `
üéâ <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –°–í–ê–î–ï–ë–ù–´–ú –°–ê–ô–¢–û–ú</b>

üìù <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/names [–ò–º—è & –ò–º—è] - –∏–∑–º–µ–Ω–∏—Ç—å –∏–º–µ–Ω–∞ –º–æ–ª–æ–¥–æ–∂–µ–Ω–æ–≤
/date [YYYY-MM-DD] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É —Å–≤–∞–¥—å–±—ã
/restaurant [–Ω–∞–∑–≤–∞–Ω–∏–µ|–∞–¥—Ä–µ—Å|—Ç–µ–ª–µ—Ñ–æ–Ω] - –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω
/deadline [–¥–∞—Ç–∞] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω –æ—Ç–≤–µ—Ç–æ–≤

üì∏ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:</b>
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é:
‚Ä¢ couple - —Ñ–æ—Ç–æ –ø–∞—Ä—ã (—Ñ—É—Ç–µ—Ä)
‚Ä¢ restaurant - —Ñ–æ—Ç–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
‚Ä¢ hero1 - —Ñ–æ–Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ 1 (–≥–ª–∞–≤–Ω–∞—è)
‚Ä¢ hero2 - —Ñ–æ–Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ 2 (–≥–ª–∞–≤–Ω–∞—è)
‚Ä¢ heromain - –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ (–≥–ª–∞–≤–Ω–∞—è)

üèõÔ∏è <b>–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—É—Ä:</b>
/tour [URL] - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—É—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞

üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>
/contact [—Ç–µ–ª–µ—Ñ–æ–Ω|telegram] - –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã

üí¨ <b>–¶–∏—Ç–∞—Ç–∞:</b>
/quote [—Ç–µ–∫—Å—Ç|–∞–≤—Ç–æ—Ä] - –∏–∑–º–µ–Ω–∏—Ç—å —Ü–∏—Ç–∞—Ç—É

üë• <b>–ì—Ä—É–ø–ø–∞ –≥–æ—Å—Ç–µ–π:</b>
/group [—Å—Å—ã–ª–∫–∞] - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É

üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>
/status - —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/preview - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç
/backup - —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞

<i>–ü—Ä–∏–º–µ—Ä: /names –ê–Ω–Ω–∞ & –ú–∏—Ö–∞–∏–ª</i>
    `;
    
    return await sendTelegramMessage(chatId, menuMessage);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏
async function sendBotHelp(chatId) {
    const helpMessage = `
üìñ <b>–ü–û–î–†–û–ë–ù–ê–Ø –°–ü–†–ê–í–ö–ê</b>

<b>1. –ò–º–µ–Ω–∞ –º–æ–ª–æ–¥–æ–∂–µ–Ω–æ–≤:</b>
/names –ê–Ω–Ω–∞ & –ú–∏—Ö–∞–∏–ª

<b>2. –î–∞—Ç–∞ —Å–≤–∞–¥—å–±—ã:</b>
/date 2025-08-15

<b>3. –†–µ—Å—Ç–æ—Ä–∞–Ω (—á–µ—Ä–µ–∑ |):</b>
/restaurant –ó–æ–ª–æ—Ç–æ–π –∑–∞–ª|–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è 1|+7 (495) 123-45-67

<b>4. –î–µ–¥–ª–∞–π–Ω –æ—Ç–≤–µ—Ç–æ–≤:</b>
/deadline 10 –∞–≤–≥—É—Å—Ç–∞ 2025

<b>5. –ö–æ–Ω—Ç–∞–∫—Ç—ã (—á–µ—Ä–µ–∑ |):</b>
/contact +7 (999) 123-45-67|@username

<b>6. –¶–∏—Ç–∞—Ç–∞ (—á–µ—Ä–µ–∑ |):</b>
/quote –õ—é–±–æ–≤—å - —ç—Ç–æ...|‚Äî –ê–≤—Ç–æ—Ä

<b>7. –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—É—Ä:</b>
/tour https://your-tour-url.com

<b>8. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ:</b>
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é:
- "couple" - —Ñ–æ—Ç–æ –ø–∞—Ä—ã
- "restaurant" - —Ñ–æ—Ç–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
- "hero1", "hero2", "heromain" - —Ñ–æ—Ç–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

<b>–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/status - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/preview - –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç
/backup - —Å–∫–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    `;
    
    return await sendTelegramMessage(chatId, helpMessage);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∞–π—Ç–∞
async function sendSiteStatus(chatId) {
    const statusMessage = `
üìä <b>–¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò –°–ê–ô–¢–ê</b>

üë• <b>–ú–æ–ª–æ–¥–æ–∂–µ–Ω—ã:</b> ${siteConfig.coupleNames}
üìÖ <b>–î–∞—Ç–∞ —Å–≤–∞–¥—å–±—ã:</b> ${siteConfig.weddingDate}
üèõÔ∏è <b>–†–µ—Å—Ç–æ—Ä–∞–Ω:</b> ${siteConfig.restaurant.name}
üìç <b>–ê–¥—Ä–µ—Å:</b> ${siteConfig.restaurant.address}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:</b> ${siteConfig.restaurant.phone}
‚è∞ <b>–î–µ–¥–ª–∞–π–Ω –æ—Ç–≤–µ—Ç–æ–≤:</b> ${siteConfig.deadline}

üì± <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>
–¢–µ–ª–µ—Ñ–æ–Ω: ${siteConfig.contact.phone}
Telegram: ${siteConfig.contact.telegram}

üí¨ <b>–¶–∏—Ç–∞—Ç–∞:</b> ${siteConfig.quote.author}

üñºÔ∏è <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b>
–§–æ—Ç–æ –ø–∞—Ä—ã: ${siteConfig.images.couple ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ' : '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}
–§–æ—Ç–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: ${siteConfig.images.restaurant ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ' : '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}
Hero —Ñ–æ—Ç–æ 1: ${siteConfig.images.heroPhoto1 ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ' : '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}
Hero —Ñ–æ—Ç–æ 2: ${siteConfig.images.heroPhoto2 ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ' : '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}
–ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ: ${siteConfig.images.heroMainPhoto ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ' : '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}

üèõÔ∏è <b>–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—É—Ä:</b> ${siteConfig.virtualTour.enabled ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
    `;
    
    return await sendTelegramMessage(chatId, statusMessage);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
async function handlePhotoUpload(chatId, photos, caption) {
    const photoType = caption.toLowerCase().trim();
    const validTypes = ['couple', 'restaurant', 'hero1', 'hero2', 'heromain'];
    
    if (!validTypes.includes(photoType)) {
        return await sendTelegramMessage(chatId, `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–æ—Ç–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n- couple (—Ñ–æ—Ç–æ –ø–∞—Ä—ã)\n- restaurant (—Ñ–æ—Ç–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞)\n- hero1 (—Ñ–æ–Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ 1)\n- hero2 (—Ñ–æ–Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ 2)\n- heromain (–≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ)`);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    const largestPhoto = photos[photos.length - 1];
    const fileUrl = `${TELEGRAM_CONFIG.apiUrl}${TELEGRAM_CONFIG.botToken}/getFile?file_id=${largestPhoto.file_id}`;
    
    try {
        const response = await fetch(fileUrl);
        const fileData = await response.json();
        
        if (fileData.ok) {
            const imageUrl = `https://api.telegram.org/file/bot${TELEGRAM_CONFIG.botToken}/${fileData.result.file_path}`;
            const filePath = fileData.result.file_path;
            const fileName = filePath.split('/').pop();
            
            console.log(`üì∏ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ ${photoType}:`, imageUrl);
            
            // –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            const photoMapping = {
                'couple': 'couple',
                'restaurant': 'restaurant',
                'hero1': 'heroPhoto1',
                'hero2': 'heroPhoto2',
                'heromain': 'heroMainPhoto'
            };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            siteConfig.images[photoMapping[photoType]] = imageUrl;
            
            console.log(`üì∏ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:`, siteConfig.images);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await saveImageToDatabase(
                photoType,
                imageUrl,
                fileName,
                largestPhoto.file_size || null,
                'image/jpeg', // Telegram –æ–±—ã—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JPEG
                largestPhoto.file_id
            );
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            await saveSiteConfig();
            
            const photoNames = {
                'couple': '–ø–∞—Ä—ã',
                'restaurant': '—Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
                'hero1': '—Ñ–æ–Ω–æ–≤–æ–µ 1',
                'hero2': '—Ñ–æ–Ω–æ–≤–æ–µ 2',
                'heromain': '–≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ'
            };
            
            return await sendTelegramMessage(chatId, `‚úÖ –§–æ—Ç–æ ${photoNames[photoType]} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\nüîó URL: ${imageUrl}\n\nüí° –û–±–Ω–æ–≤–∏—Ç–µ —Å–∞–π—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:', error);
        return await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async function saveSiteConfig() {
    if (!SUPABASE_CONFIG.client) {
        console.log('‚ö†Ô∏è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        return;
    }

    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const { error: configError } = await SUPABASE_CONFIG.client
            .from('site_config')
            .upsert([{
                id: 1,
                couple_names: siteConfig.coupleNames,
                wedding_date: siteConfig.weddingDate,
                restaurant_name: siteConfig.restaurant.name,
                restaurant_address: siteConfig.restaurant.address,
                restaurant_phone: siteConfig.restaurant.phone,
                deadline: siteConfig.deadline,
                contact_phone: siteConfig.contact.phone,
                contact_telegram: siteConfig.contact.telegram,
                quote_text: siteConfig.quote.text,
                quote_author: siteConfig.quote.author,
                virtual_tour_enabled: siteConfig.virtualTour.enabled,
                virtual_tour_url: siteConfig.virtualTour.url,
                updated_at: new Date().toISOString()
            }]);

        if (configError) throw configError;
        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Supabase');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async function saveImageToDatabase(imageType, imageUrl, fileName, fileSize, mimeType, telegramFileId) {
    if (!SUPABASE_CONFIG.client) return;

    try {
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
        await SUPABASE_CONFIG.client
            .from('site_images')
            .update({ is_active: false })
            .eq('image_type', imageType);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const { error } = await SUPABASE_CONFIG.client
            .from('site_images')
            .insert([{
                image_type: imageType,
                image_url: imageUrl,
                file_name: fileName,
                file_size: fileSize,
                mime_type: mimeType,
                telegram_file_id: telegramFileId,
                is_active: true
            }]);

        if (error) throw error;
        console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${imageType} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${imageType}:`, error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function loadSiteConfig() {
    if (!SUPABASE_CONFIG.client) {
        console.log('‚ö†Ô∏è Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è');
        return;
    }

    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const { data: configData, error: configError } = await SUPABASE_CONFIG.client
            .from('site_config')
            .select('*')
            .eq('id', 1)
            .single();

        if (configError && configError.code !== 'PGRST116') {
            throw configError;
        }

        if (configData) {
            siteConfig.coupleNames = configData.couple_names || siteConfig.coupleNames;
            siteConfig.weddingDate = configData.wedding_date || siteConfig.weddingDate;
            siteConfig.restaurant.name = configData.restaurant_name || siteConfig.restaurant.name;
            siteConfig.restaurant.address = configData.restaurant_address || siteConfig.restaurant.address;
            siteConfig.restaurant.phone = configData.restaurant_phone || siteConfig.restaurant.phone;
            siteConfig.deadline = configData.deadline || siteConfig.deadline;
            siteConfig.contact.phone = configData.contact_phone || siteConfig.contact.phone;
            siteConfig.contact.telegram = configData.contact_telegram || siteConfig.contact.telegram;
            siteConfig.quote.text = configData.quote_text || siteConfig.quote.text;
            siteConfig.quote.author = configData.quote_author || siteConfig.quote.author;
            siteConfig.virtualTour.enabled = configData.virtual_tour_enabled || false;
            siteConfig.virtualTour.url = configData.virtual_tour_url || null;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const { data: imagesData, error: imagesError } = await SUPABASE_CONFIG.client
            .from('site_images')
            .select('*')
            .eq('is_active', true);

        if (imagesError) throw imagesError;

        if (imagesData && imagesData.length > 0) {
            const imageMapping = {
                'couple': 'couple',
                'restaurant': 'restaurant',
                'hero1': 'heroPhoto1',
                'hero2': 'heroPhoto2',
                'heromain': 'heroMainPhoto'
            };

            imagesData.forEach(img => {
                if (imageMapping[img.image_type]) {
                    siteConfig.images[imageMapping[img.image_type]] = img.image_url;
                }
            });
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç–æ—Ä–∂–µ—Å—Ç–≤–∞
        const { data: timelineData, error: timelineError } = await SUPABASE_CONFIG.client
            .from('wedding_timeline')
            .select('*')
            .eq('is_active', true)
            .order('order_index');

        if (timelineError) throw timelineError;

        if (timelineData && timelineData.length > 0) {
            siteConfig.timeline = timelineData.map(item => ({
                time: item.time_slot,
                title: item.title,
                description: item.description,
                note: item.note,
                icon: item.icon
            }));
        }

        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ Supabase');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function isValidDate(dateString) {
    const date = new Date(dateString);
    return date instanceof Date && !isNaN(date);
}

// Webhook –¥–ª—è Telegram
app.post('/webhook/telegram', async (req, res) => {
    console.log('Telegram webhook received:', JSON.stringify(req.body, null, 2));
    
    try {
        const update = req.body;
        
        if (update.message) {
            const message = update.message;
            const chatId = message.chat.id;
            const text = message.text;
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if (text && text.startsWith('/')) {
                const parts = text.split(' ');
                const command = parts[0];
                const value = parts.slice(1).join(' ');
                
                await handleBotCommand(chatId, command, value);
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            if (message.photo && message.caption) {
                await handlePhotoUpload(chatId, message.photo, message.caption);
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≥–æ—Å—Ç–µ–π (–µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–æ—Ç)
            if (text && !text.startsWith('/')) {
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                await sendTelegramMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–æ–º. –ù–∞–ø–∏—à–∏—Ç–µ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
            }
        }
        
        res.status(200).json({ ok: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞
app.get('/api/config', async (req, res) => {
    try {
        // –ï—Å–ª–∏ Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≤ –ø–∞–º—è—Ç–∏ –µ—â—ë –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥—Ç—è–Ω—É—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∏–∑ –ë–î
        const hasAnyImage = siteConfig.images && (
            siteConfig.images.couple ||
            siteConfig.images.restaurant ||
            siteConfig.images.heroPhoto1 ||
            siteConfig.images.heroPhoto2 ||
            siteConfig.images.heroMainPhoto
        );

        if (SUPABASE_CONFIG.client && !hasAnyImage) {
            await loadSiteConfig();
        }

        console.log('üì° –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', siteConfig);
        res.json(siteConfig);
    } catch (e) {
        res.json(siteConfig);
    }
});

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
app.get('/api/test', (req, res) => {
    res.json({
        message: '–°–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!',
        timestamp: new Date().toISOString(),
        supabaseConnected: !!SUPABASE_CONFIG.client,
        config: siteConfig
    });
});

// API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≥–æ—Å—Ç—è
app.post('/api/rsvp', async (req, res) => {
    try {
        const { fullName, phone, attendance, guestName, message } = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!fullName || !attendance) {
            return res.status(400).json({ error: '–ò–º—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }
        
        const responseData = {
            full_name: fullName,
            phone: phone || null,
            attendance: attendance,
            guest_name: guestName || null,
            message: message || null,
            ip_address: req.ip || req.connection.remoteAddress,
            user_agent: req.get('User-Agent'),
            created_at: new Date().toISOString()
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if (SUPABASE_CONFIG.client) {
            const { error } = await SUPABASE_CONFIG.client
                .from('wedding_responses')
                .insert([responseData]);
            
            if (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase:', error);
                return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞' });
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        const telegramMessage = formatGuestResponse(responseData);
        await sendTelegramMessage(TELEGRAM_CONFIG.chatId, telegramMessage);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –≥–æ—Å—Ç—é (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
        if (siteConfig.guestGroup.enabled && siteConfig.guestGroup.url && phone) {
            const inviteMessage = siteConfig.guestGroup.inviteMessage.replace('{GROUP_URL}', siteConfig.guestGroup.url);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram (–µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å chat_id –≥–æ—Å—Ç—è)
            // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
            console.log(`üì® –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –≥–æ—Å—Ç—é ${fullName}: ${inviteMessage}`);
            
            // TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏
        }
        
        res.json({ 
            success: true, 
            message: '–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
            groupInvite: siteConfig.guestGroup.enabled ? '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' : null
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ RSVP:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
app.get('/api/responses', async (req, res) => {
    try {
        if (!SUPABASE_CONFIG.client) {
            return res.json({ total: 0, responses: [], stats: { coming: 0, withGuest: 0, notComing: 0, totalGuests: 0 } });
        }
        
        const { data, error } = await SUPABASE_CONFIG.client
            .from('wedding_responses')
            .select('*')
            .order('created_at', { ascending: false });
        
        if (error) throw error;
        
        const stats = {
            coming: data.filter(r => r.attendance === 'yes').length,
            withGuest: data.filter(r => r.attendance === 'with-guest').length,
            notComing: data.filter(r => r.attendance === 'no').length
        };
        
        stats.totalGuests = stats.coming + (stats.withGuest * 2);
        
        res.json({
            total: data.length,
            responses: data,
            stats: stats
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö' });
    }
});

// API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
app.get('/api/images', async (req, res) => {
    try {
        if (!SUPABASE_CONFIG.client) {
            return res.json({ images: [] });
        }
        
        const { data, error } = await SUPABASE_CONFIG.client
            .from('site_images')
            .select('*')
            .eq('is_active', true)
            .order('uploaded_at', { ascending: false });
        
        if (error) throw error;
        
        res.json({ images: data });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π' });
    }
});

// API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É)
app.get('/api/full-config', async (req, res) => {
    try {
        if (!SUPABASE_CONFIG.client) {
            return res.json(siteConfig);
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const { data, error } = await SUPABASE_CONFIG.client
            .from('site_full_config')
            .select('*')
            .single();
        
        if (error && error.code !== 'PGRST116') {
            throw error;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–≤–µ—Ç–æ–≤
        const { data: statsData, error: statsError } = await SUPABASE_CONFIG.client
            .rpc('get_rsvp_stats');
        
        const fullConfig = {
            ...siteConfig,
            database: data || null,
            rsvpStats: statsData || { total: 0, coming: 0, with_guest: 0, not_coming: 0, total_guests: 0 }
        };
        
        res.json(fullConfig);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
        res.json(siteConfig);
    }
});

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≥–æ—Å—Ç—è –¥–ª—è Telegram
function formatGuestResponse(data) {
    const attendanceText = {
        'yes': '‚úÖ –ë—É–¥—É –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å',
        'with-guest': 'üë• –ü—Ä–∏–¥—É —Å –≥–æ—Å—Ç–µ–º (+1)',
        'no': '‚ùå –ù–µ —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏'
    };
    
    let message = `üéâ <b>–ù–û–í–´–ô –û–¢–í–ï–¢ –ù–ê –°–í–ê–î–ï–ë–ù–û–ï –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï</b>\n\n`;
    message += `üë§ <b>–ò–º—è:</b> ${data.full_name}\n`;
    
    if (data.phone) {
        message += `üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${data.phone}\n`;
    }
    
    message += `üìã <b>–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ:</b> ${attendanceText[data.attendance]}\n`;
    
    if (data.guest_name && data.attendance === 'with-guest') {
        message += `üë• <b>–ò–º—è –≥–æ—Å—Ç—è:</b> ${data.guest_name}\n`;
    }
    
    if (data.message) {
        message += `üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${data.message}\n`;
    }
    
    message += `\n‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date(data.created_at).toLocaleString('ru-RU')}`;
    
    return message;
}

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook Telegram
app.post('/api/setup-webhook', async (req, res) => {
    try {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è webhook
        let webhookUrl;
        const host = req.get('host');
        
        if (host && host.includes('onrender.com')) {
            webhookUrl = `https://${host}/webhook/telegram`;
        } else if (process.env.RENDER_EXTERNAL_URL) {
            webhookUrl = `${process.env.RENDER_EXTERNAL_URL}/webhook/telegram`;
        } else {
            // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
            return res.json({ 
                success: false, 
                message: 'Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
                webhookUrl: 'localhost'
            });
        }
        
        const url = `${TELEGRAM_CONFIG.apiUrl}${TELEGRAM_CONFIG.botToken}/setWebhook`;
        
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                url: webhookUrl
            })
        });
        
        const result = await response.json();
        
        if (result.ok) {
            console.log('‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', webhookUrl);
            res.json({ success: true, webhookUrl, result });
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', result);
            res.status(400).json({ success: false, error: result });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
app.get('/health', (req, res) => {
    res.status(200).json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        telegram: {
            configured: !!TELEGRAM_CONFIG.botToken,
            botToken: TELEGRAM_CONFIG.botToken ? 'Configured' : 'Not configured'
        },
        supabase: {
            configured: !!SUPABASE_CONFIG.client,
            url: SUPABASE_CONFIG.url ? 'Configured' : 'Not configured'
        }
    });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/debug', (req, res) => {
    res.sendFile(path.join(__dirname, 'debug.html'));
});

// –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
app.get('/admin', (req, res) => {
    res.sendFile(path.join(__dirname, 'admin.html'));
});

// API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ Supabase Storage
app.post('/api/upload-image', upload.single('image'), async (req, res) => {
    console.log('üì§ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    console.log('üìã –§–∞–π–ª:', req.file ? req.file.originalname : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
    console.log('üìã –¢–∏–ø:', req.body.type);
    console.log('üîó Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω:', !!SUPABASE_CONFIG.client);
    
    try {
        if (!req.file) {
            console.error('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ');
            return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        if (!SUPABASE_CONFIG.client) {
            // –õ–æ–∫–∞–ª—å–Ω—ã–π fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ /uploads –∏ –æ–±–Ω–æ–≤–ª—è–µ–º siteConfig
            try {
                const { type } = req.body;
                const validTypes = ['couple', 'restaurant', 'hero1', 'hero2', 'heromain'];
                if (!validTypes.includes(type)) {
                    return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' });
                }

                const uploadsDir = path.join(__dirname, 'uploads', 'wedding-images');
                fs.mkdirSync(uploadsDir, { recursive: true });

                const originalExt = req.file.originalname.includes('.') ? req.file.originalname.split('.').pop() : 'jpg';
                const fileName = `${type}_${Date.now()}.${originalExt}`;
                const absFilePath = path.join(uploadsDir, fileName);
                fs.writeFileSync(absFilePath, req.file.buffer);

                const publicUrl = `/uploads/wedding-images/${fileName}`;

                const photoMapping = {
                    'couple': 'couple',
                    'restaurant': 'restaurant',
                    'hero1': 'heroPhoto1',
                    'hero2': 'heroPhoto2',
                    'heromain': 'heroMainPhoto'
                };
                siteConfig.images[photoMapping[type]] = publicUrl;
                await saveSiteConfig();

                console.log(`‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${type}: ${publicUrl}`);

                return res.json({
                    success: true,
                    message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ (–ª–æ–∫–∞–ª—å–Ω–æ)',
                    imageUrl: publicUrl,
                    fileName,
                    type
                });
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', e);
                return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ' });
            }
        }

        const { type } = req.body;
        const validTypes = ['couple', 'restaurant', 'hero1', 'hero2', 'heromain'];
        
        if (!validTypes.includes(type)) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' });
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        const fileExt = req.file.originalname.split('.').pop();
        const fileName = `${type}_${Date.now()}.${fileExt}`;
        const filePath = `wedding-images/${fileName}`;

        console.log(`üì∏ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${type}:`, fileName);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage
        const { data: uploadData, error: uploadError } = await SUPABASE_CONFIG.client.storage
            .from('wedding-images')
            .upload(filePath, req.file.buffer, {
                contentType: req.file.mimetype,
                upsert: true
            });

        if (uploadError) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Storage:', uploadError);
            return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ' + uploadError.message });
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
        const { data: urlData } = SUPABASE_CONFIG.client.storage
            .from('wedding-images')
            .getPublicUrl(filePath);

        const imageUrl = urlData.publicUrl;
        console.log(`üì∏ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, URL:`, imageUrl);

        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
        await SUPABASE_CONFIG.client
            .from('site_images')
            .update({ is_active: false })
            .eq('image_type', type);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const { error: dbError } = await SUPABASE_CONFIG.client
            .from('site_images')
            .insert([{
                image_type: type,
                image_url: imageUrl,
                file_name: fileName,
                file_size: req.file.size,
                mime_type: req.file.mimetype,
                is_active: true
            }]);

        if (dbError) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', dbError);
            return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: ' + dbError.message });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∞–π—Ç–∞
        const photoMapping = {
            'couple': 'couple',
            'restaurant': 'restaurant',
            'hero1': 'heroPhoto1',
            'hero2': 'heroPhoto2',
            'heromain': 'heroMainPhoto'
        };

        siteConfig.images[photoMapping[type]] = imageUrl;
        await saveSiteConfig();

        console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${type} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ`);

        res.json({
            success: true,
            message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ',
            imageUrl: imageUrl,
            fileName: fileName,
            type: type
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message });
    }
});

// API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
app.delete('/api/delete-image/:id', async (req, res) => {
    try {
        if (!SUPABASE_CONFIG.client) {
            return res.status(500).json({ error: 'Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
        }

        const { id } = req.params;

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        const { data: imageData, error: fetchError } = await SUPABASE_CONFIG.client
            .from('site_images')
            .select('*')
            .eq('id', id)
            .single();

        if (fetchError || !imageData) {
            return res.status(404).json({ error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
        }

        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ Storage
        const filePath = `wedding-images/${imageData.file_name}`;
        const { error: deleteError } = await SUPABASE_CONFIG.client.storage
            .from('wedding-images')
            .remove([filePath]);

        if (deleteError) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Storage:', deleteError);
        }

        // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const { error: dbError } = await SUPABASE_CONFIG.client
            .from('site_images')
            .delete()
            .eq('id', id);

        if (dbError) {
            return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ' + dbError.message });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∞–π—Ç–∞
        const photoMapping = {
            'couple': 'couple',
            'restaurant': 'restaurant',
            'hero1': 'heroPhoto1',
            'hero2': 'heroPhoto2',
            'heromain': 'heroMainPhoto'
        };

        if (photoMapping[imageData.image_type]) {
            siteConfig.images[photoMapping[imageData.image_type]] = null;
            await saveSiteConfig();
        }

        console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${imageData.image_type} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ`);

        res.json({
            success: true,
            message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (SPA fallback)
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('Server error:', err);
    res.status(500).json({
        error: 'Internal Server Error',
        message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'
    });
});

// Polling –¥–ª—è Telegram –±–æ—Ç–∞ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
let lastUpdateId = 0;

async function startTelegramPolling() {
    console.log('ü§ñ –ó–∞–ø—É—Å–∫ Telegram polling...');
    
    setInterval(async () => {
        try {
            const response = await fetch(`${TELEGRAM_CONFIG.apiUrl}${TELEGRAM_CONFIG.botToken}/getUpdates?offset=${lastUpdateId + 1}&timeout=10`);
            const result = await response.json();
            
            if (result.ok && result.result.length > 0) {
                for (const update of result.result) {
                    lastUpdateId = update.update_id;
                    
                    if (update.message) {
                        const message = update.message;
                        const chatId = message.chat.id;
                        const text = message.text;
                        
                        console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${chatId}: ${text}`);
                        
                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                        if (text && text.startsWith('/')) {
                            const parts = text.split(' ');
                            const command = parts[0];
                            const value = parts.slice(1).join(' ');
                            
                            await handleBotCommand(chatId, command, value);
                        }
                        
                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                        if (message.photo && message.caption) {
                            await handlePhotoUpload(chatId, message.photo, message.caption);
                        }
                        
                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                        if (text && !text.startsWith('/')) {
                            await sendTelegramMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–æ–º. –ù–∞–ø–∏—à–∏—Ç–µ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
                        }
                    }
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ polling:', error);
        }
    }, 2000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
    console.log(`üéâ Wedding invitation site is running on port ${PORT}`);
    console.log(`üåê Access at: http://localhost:${PORT}`);
    console.log(`üì± Telegram bot: ${TELEGRAM_CONFIG.botToken ? 'Configured' : 'Not configured'}`);
    console.log(`üóÑÔ∏è Supabase: ${SUPABASE_CONFIG.url ? 'Configured' : 'Not configured'}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await loadSiteConfig();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º polling –¥–ª—è –±–æ—Ç–∞
    if (TELEGRAM_CONFIG.botToken) {
        await startTelegramPolling();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        setTimeout(async () => {
            await sendTelegramMessage(TELEGRAM_CONFIG.chatId, 'ü§ñ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–æ–º.');
        }, 3000);
    }
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('SIGTERM received, shutting down gracefully');
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('SIGINT received, shutting down gracefully');
    process.exit(0);
});