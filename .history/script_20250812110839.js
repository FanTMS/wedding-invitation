// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let SITE_CONFIG = {
    coupleNames: '–ò–º—è & –ò–º—è',
    weddingDate: '2025-08-15',
    restaurant: {
        name: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
        address: '–≥. –ì–æ—Ä–æ–¥, —É–ª. –ê–¥—Ä–µ—Å',
        phone: '+7 (XXX) XXX-XX-XX'
    },
    deadline: '10 –∞–≤–≥—É—Å—Ç–∞ 2025',
    contact: {
        phone: '+7 (XXX) XXX-XX-XX',
        telegram: '@username'
    },
    quote: {
        text: '–õ—é–±–æ–≤—å –Ω–µ –≤ —Ç–æ–º, —á—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞,<br>–∞ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –≤–º–µ—Å—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏',
        author: '‚Äî –ê–Ω—Ç—É–∞–Ω –¥–µ –°–µ–Ω—Ç-–≠–∫–∑—é–ø–µ—Ä–∏'
    },
    images: {
        couple: null,
        restaurant: null,
        heroPhoto1: null,
        heroPhoto2: null,
        heroMainPhoto: null
    },
    virtualTour: {
        enabled: false,
        url: null
    }
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function loadConfigFromServer() {
    try {
        const response = await fetch('/api/config');
        if (response.ok) {
            const config = await response.json();
            SITE_CONFIG = { ...SITE_CONFIG, ...config };
            updateSiteDisplay();
            console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞');

            // –ù–µ–±–æ–ª—å—à–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—â—ë –Ω–µ —É—Å–ø–µ–ª–∏ –ø–æ–¥—Ç—è–Ω—É—Ç—å—Å—è —Å –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
            if (!SITE_CONFIG.images || (
                !SITE_CONFIG.images.heroMainPhoto &&
                !SITE_CONFIG.images.heroPhoto1 &&
                !SITE_CONFIG.images.heroPhoto2 &&
                !SITE_CONFIG.images.couple &&
                !SITE_CONFIG.images.restaurant
            )) {
                setTimeout(async () => {
                    try {
                        const resp2 = await fetch('/api/config');
                        if (resp2.ok) {
                            const cfg2 = await resp2.json();
                            SITE_CONFIG = { ...SITE_CONFIG, ...cfg2 };
                            updateSiteDisplay();
                            console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
                        }
                    } catch (e) {
                        // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                    }
                }, 1200);
            }
        }
    } catch (error) {
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∞–π—Ç–∞
function updateSiteDisplay() {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∞–π—Ç–∞...');
    console.log('üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ:', SITE_CONFIG.images);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–µ–Ω–∞
    document.querySelectorAll('.couple-names, .couple-signature').forEach(el => {
        el.textContent = SITE_CONFIG.coupleNames;
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
    const date = new Date(SITE_CONFIG.weddingDate);
    const dateNumber = document.querySelector('.date-number');
    const dateMonth = document.querySelector('.date-month');
    const overlayDateNumber = document.querySelector('.overlay-date-number');
    const overlayDateMonth = document.querySelector('.overlay-date-month');
    
    if (dateNumber) dateNumber.textContent = date.getDate();
    if (dateMonth) dateMonth.textContent = date.toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' }).toUpperCase();
    if (overlayDateNumber) overlayDateNumber.textContent = date.getDate();
    if (overlayDateMonth) overlayDateMonth.textContent = date.toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' }).toUpperCase();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω
    document.querySelectorAll('[data-restaurant-name]').forEach(el => {
        el.textContent = SITE_CONFIG.restaurant.name;
    });
    document.querySelectorAll('[data-restaurant-address]').forEach(el => {
        el.textContent = SITE_CONFIG.restaurant.address;
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–¥–ª–∞–π–Ω
    const deadlineEl = document.querySelector('.rsvp-description strong');
    if (deadlineEl) deadlineEl.textContent = SITE_CONFIG.deadline;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
    const phoneEl = document.querySelector('.contact-info a[href^="tel:"]');
    const telegramEl = document.querySelector('.contact-info a[href^="https://t.me/"]');
    if (phoneEl) {
        phoneEl.textContent = SITE_CONFIG.contact.phone;
        phoneEl.href = `tel:${SITE_CONFIG.contact.phone}`;
    }
    if (telegramEl) {
        telegramEl.textContent = SITE_CONFIG.contact.telegram;
        telegramEl.href = `https://t.me/${SITE_CONFIG.contact.telegram.replace('@', '')}`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É
    const quoteText = document.querySelector('blockquote');
    const quoteAuthor = document.querySelector('cite');
    if (quoteText) quoteText.innerHTML = SITE_CONFIG.quote.text;
    if (quoteAuthor) quoteAuthor.textContent = SITE_CONFIG.quote.author;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    updateHeroPhotos();
    updateOtherImages();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ hero —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
function updateHeroPhotos() {
    updateHeroPhoto('hero-photo-1', SITE_CONFIG.images.heroPhoto1);
    updateHeroPhoto('hero-photo-2', SITE_CONFIG.images.heroPhoto2);
    updateHeroPhoto('hero-main-photo', SITE_CONFIG.images.heroMainPhoto);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º placeholder –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ
    const mainPhoto = document.getElementById('hero-main-photo');
    const placeholder = document.querySelector('.main-photo-placeholder');
    
    if (mainPhoto && placeholder) {
        if (SITE_CONFIG.images.heroMainPhoto) {
            mainPhoto.style.display = 'block';
            placeholder.style.display = 'none';
            console.log('‚úÖ –ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ:', SITE_CONFIG.images.heroMainPhoto);
        } else {
            mainPhoto.style.display = 'none';
            placeholder.style.display = 'flex';
            console.log('üì∑ –ü–æ–∫–∞–∑–∞–Ω placeholder –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ');
        }
    }
}

function updateHeroPhoto(elementId, imageUrl) {
    const element = document.getElementById(elementId);
    if (!element) return;

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω id IMG-—ç–ª–µ–º–µ–Ω—Ç–∞ (–∫–∞–∫ —É heroMainPhoto), —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —Å –Ω–∏–º
    const isImgElement = element.tagName && element.tagName.toLowerCase() === 'img';
    const container = isImgElement ? element.parentElement : element;
    const img = isImgElement
        ? element
        : (container.querySelector('.hero-img') || container.querySelector('img'));
    const placeholder = (container && (container.querySelector('.photo-placeholder') || container.querySelector('.main-photo-placeholder'))) || null;

    if (imageUrl && img) {
        img.src = imageUrl;
        img.style.display = 'block';
        if (placeholder) placeholder.style.display = 'none';
    } else {
        if (img) img.style.display = 'none';
        if (placeholder) placeholder.style.display = 'flex';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
function updateOtherImages() {
    if (SITE_CONFIG.images.couple) {
        const coupleImg = document.getElementById('couple-img');
        if (coupleImg) coupleImg.src = SITE_CONFIG.images.couple;
    }
    
    if (SITE_CONFIG.images.restaurant) {
        const restaurantImg = document.getElementById('restaurant-img');
        if (restaurantImg) restaurantImg.src = SITE_CONFIG.images.restaurant;
    }

    if (SITE_CONFIG.images.comparisonPhoto) {
        const comparison = document.getElementById('comparison-photo');
        if (comparison) comparison.src = SITE_CONFIG.images.comparisonPhoto;
    }

    if (SITE_CONFIG.images.zagsPhoto) {
        const zags = document.getElementById('zags-img');
        if (zags) zags.src = SITE_CONFIG.images.zagsPhoto;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è hero —Å–µ–∫—Ü–∏–∏ (—Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ —Å –¥–∞—Ç–æ–π)
function initHeroDisplay() {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ñ–æ—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    const photoDisplay = document.querySelector('.wedding-photo');
    if (photoDisplay) {
        photoDisplay.style.display = 'block';
        console.log('‚úÖ Hero —Ñ–æ—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    }
}

// –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—É—Ä
function showVirtualTour() {
    const modal = document.getElementById('virtual-tour-modal');
    const iframe = document.getElementById('tour-iframe');
    const placeholder = document.getElementById('tour-placeholder');
    
    if (SITE_CONFIG.virtualTour.enabled && SITE_CONFIG.virtualTour.url) {
        iframe.src = SITE_CONFIG.virtualTour.url;
        iframe.style.display = 'block';
        placeholder.style.display = 'none';
    } else {
        iframe.style.display = 'none';
        placeholder.style.display = 'flex';
    }
    
    modal.classList.add('show');
}

function closeVirtualTour() {
    const modal = document.getElementById('virtual-tour-modal');
    const iframe = document.getElementById('tour-iframe');
    
    modal.classList.remove('show');
    iframe.src = '';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã RSVP
function initRSVPForm() {
    const form = document.getElementById('rsvp-form-modern');
    const guestDetails = document.getElementById('guest-details');
    const attendanceRadios = document.querySelectorAll('input[name="attendance"]');
    
    // –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ø–æ–ª—è –¥–ª—è –∏–º–µ–Ω–∏ –≥–æ—Å—Ç—è
    attendanceRadios.forEach(radio => {
        radio.addEventListener('change', function() {
            if (this.value === 'with-guest') {
                guestDetails.style.display = 'block';
                guestDetails.querySelector('input').required = true;
            } else {
                guestDetails.style.display = 'none';
                guestDetails.querySelector('input').required = false;
                guestDetails.querySelector('input').value = '';
            }
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const submitButton = form.querySelector('.btn-submit');
        const originalText = submitButton.innerHTML;
        
        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
        submitButton.disabled = true;
        
        const formData = new FormData(form);
        const data = {
            fullName: formData.get('fullName'),
            phone: formData.get('phone'),
            attendance: formData.get('attendance'),
            guestName: formData.get('guestName'),
            message: formData.get('message')
        };
        
        try {
            const response = await fetch('/api/rsvp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });
            
            const result = await response.json();
            
            submitButton.innerHTML = originalText;
            submitButton.disabled = false;
            
            if (response.ok && result.success) {
                showSuccessModal();
                form.reset();
                guestDetails.style.display = 'none';
            } else {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã:', error);
            submitButton.innerHTML = originalText;
            submitButton.disabled = false;
            showErrorMessage(error.message);
        }
    });
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
function showSuccessModal() {
    const modal = document.getElementById('success-modal');
    modal.classList.add('show');
}

function closeModal() {
    const modal = document.getElementById('success-modal');
    modal.classList.remove('show');
}

function showErrorMessage(message) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message';
    errorDiv.innerHTML = `
        <div style="background: #f8d7da; color: #721c24; padding: 15px; border-radius: 10px; margin: 20px 0; text-align: center;">
            <i class="fas fa-exclamation-triangle"></i>
            ${message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'}
        </div>
    `;
    
    const form = document.getElementById('rsvp-form-modern');
    form.parentNode.insertBefore(errorDiv, form);
    
    setTimeout(() => {
        errorDiv.remove();
    }, 5000);
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –∫–∞—Ä—Ç—ã
function openMap() {
    const address = SITE_CONFIG.restaurant.address;
    const encodedAddress = encodeURIComponent(address);
    window.open(`https://yandex.ru/maps/?text=${encodedAddress}`, '_blank');
}

function openNavigator() {
    const address = SITE_CONFIG.restaurant.address;
    const encodedAddress = encodeURIComponent(address);
    
    const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    
    if (isMobile) {
        if (/iPhone|iPad|iPod/i.test(navigator.userAgent)) {
            window.open(`maps://maps.apple.com/?q=${encodedAddress}`);
        } else {
            window.open(`geo:0,0?q=${encodedAddress}`);
        }
    } else {
        window.open(`https://yandex.ru/maps/?rtext=~${encodedAddress}&rtt=auto`, '_blank');
    }
}

// –ê–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
function initScrollAnimations() {
    // –û—Ç–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞ —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    const isLowEndDevice = navigator.hardwareConcurrency <= 2 || 
                          navigator.deviceMemory <= 2 ||
                          window.innerWidth <= 480;
    
    if (isLowEndDevice) {
        console.log('üîß –ê–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
        return;
    }
    
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -30px 0px'
    };
    
    const observer = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
            }
        });
    }, observerOptions);
    
    const sections = document.querySelectorAll('section:not(.hero)');
    sections.forEach(section => {
        section.style.opacity = '0';
        section.style.transform = 'translateY(20px)';
        section.style.transition = 'opacity 0.4s ease, transform 0.4s ease';
        observer.observe(section);
    });
}

// –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
function initSmoothScroll() {
    const scrollIndicator = document.querySelector('.scroll-indicator');
    if (scrollIndicator) {
        scrollIndicator.addEventListener('click', function() {
            const nextSection = document.querySelector('.quote-section');
            if (nextSection) {
                nextSection.scrollIntoView({ behavior: 'smooth' });
            }
        });
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Telegram –±–æ—Ç–∞
async function setupTelegramWebhook() {
    try {
        const response = await fetch('/api/setup-webhook', {
            method: 'POST'
        });
        
        const result = await response.json();
        
        if (result.success) {
            console.log('‚úÖ Telegram webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', result.webhookUrl);
        } else {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', result.error);
        }
    } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook:', error.message);
    }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function isMobileDevice() {
    return /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || 
           window.innerWidth <= 768;
}

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
function initMobileOptimizations() {
    if (!isMobileDevice()) return;
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑—É–º–∞ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ input
    const inputs = document.querySelectorAll('input, textarea, select');
    inputs.forEach(input => {
        input.addEventListener('focus', function() {
            if (this.style.fontSize !== '16px') {
                this.style.fontSize = '16px';
            }
        });
        
        input.addEventListener('blur', function() {
            this.style.fontSize = '';
        });
    });
    
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è touch —Å–æ–±—ã—Ç–∏–π
    let touchStartY = 0;
    document.addEventListener('touchstart', function(e) {
        touchStartY = e.touches[0].clientY;
    }, { passive: true });
    
    document.addEventListener('touchmove', function(e) {
        const touchY = e.touches[0].clientY;
        const touchDiff = touchStartY - touchY;
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ bounce —ç—Ñ—Ñ–µ–∫—Ç–∞ –Ω–∞ iOS
        if (document.body.scrollTop === 0 && touchDiff < 0) {
            e.preventDefault();
        }
    }, { passive: false });
    
    // –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    let ticking = false;
    function updateScrollPosition() {
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        ticking = false;
    }
    
    document.addEventListener('scroll', function() {
        if (!ticking) {
            requestAnimationFrame(updateScrollPosition);
            ticking = true;
        }
    }, { passive: true });
    
    console.log('üì± –ú–æ–±–∏–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã');
}

// –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
function initLazyLoading() {
    const images = document.querySelectorAll('img[data-src]');
    
    if ('IntersectionObserver' in window) {
        const imageObserver = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    img.src = img.dataset.src;
                    img.classList.remove('lazy');
                    imageObserver.unobserve(img);
                }
            });
        });
        
        images.forEach(img => imageObserver.observe(img));
    } else {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        images.forEach(img => {
            img.src = img.dataset.src;
            img.classList.remove('lazy');
        });
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
let loadingProgress = 0;
let loadingTexts = [
    '–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ—Ä–∂–µ—Å—Ç–≤–µ...',
    '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...',
    '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...',
    '–§–∏–Ω–∞–ª—å–Ω—ã–µ —à—Ç—Ä–∏—Ö–∏...',
    '–ì–æ—Ç–æ–≤–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'
];

function updateLoadingText() {
    const loadingTextElement = document.querySelector('.loading-text');
    if (loadingTextElement && loadingProgress < loadingTexts.length) {
        loadingTextElement.textContent = loadingTexts[loadingProgress];
        loadingProgress++;
    }
}

function hideLoadingScreen() {
    const loadingScreen = document.getElementById('loading-screen');
    const body = document.body;
    
    if (loadingScreen) {
        // –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        const loadingTextElement = document.querySelector('.loading-text');
        if (loadingTextElement) {
            loadingTextElement.textContent = '–ì–æ—Ç–æ–≤–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!';
        }
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–∫—Ä—ã—Ç–∏–µ–º
        setTimeout(() => {
            loadingScreen.classList.add('hidden');
            body.classList.remove('loading');
            
            // –£–¥–∞–ª—è–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ DOM —á–µ—Ä–µ–∑ 500–º—Å
            setTimeout(() => {
                if (loadingScreen.parentNode) {
                    loadingScreen.parentNode.removeChild(loadingScreen);
                }
            }, 500);
        }, 500);
    }
}

// –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —ç—Ç–∞–ø–∞–º–∏
async function simulateLoading() {
    const steps = [
        { delay: 300, text: 0 },   // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ—Ä–∂–µ—Å—Ç–≤–µ
        { delay: 600, text: 1 },   // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        { delay: 400, text: 2 },   // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        { delay: 500, text: 3 },   // –§–∏–Ω–∞–ª—å–Ω—ã–µ —à—Ç—Ä–∏—Ö–∏
        { delay: 300, text: 4 }    // –ì–æ—Ç–æ–≤–æ!
    ];
    
    for (let step of steps) {
        await new Promise(resolve => {
            setTimeout(() => {
                loadingProgress = step.text;
                updateLoadingText();
                resolve();
            }, step.delay);
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async function() {
    console.log('üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤–∞–¥–µ–±–Ω–æ–≥–æ —Å–∞–π—Ç–∞ v8.0...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
    const loadingSimulation = simulateLoading();
    
    // –†–µ–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    const initializationTasks = async () => {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞
        await loadConfigFromServer();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        initHeroDisplay();
        initRSVPForm();
        initScrollAnimations();
        initSmoothScroll();
        initMobileOptimizations();
        initLazyLoading();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –¥–ª—è –±–æ—Ç–∞
        await setupTelegramWebhook();
        
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        const criticalImages = [
            SITE_CONFIG.images.heroMainPhoto,
            SITE_CONFIG.images.couple,
            SITE_CONFIG.images.restaurant
        ].filter(Boolean);
        
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const imagePromises = criticalImages.map(src => {
            return new Promise((resolve) => {
                const img = new Image();
                img.onload = resolve;
                img.onerror = resolve; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
                img.src = src;
            });
        });
        
        await Promise.all(imagePromises);
    };
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ —Å–∏–º—É–ª—è—Ü–∏–∏, –∏ —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    await Promise.all([loadingSimulation, initializationTasks()]);
    
    // –°–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
    hideLoadingScreen();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    setTimeout(() => {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
        const modal = document.getElementById('success-modal');
        if (modal) {
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    closeModal();
                }
            });
        }
        
        const tourModal = document.getElementById('virtual-tour-modal');
        if (tourModal) {
            tourModal.addEventListener('click', function(e) {
                if (e.target === tourModal) {
                    closeVirtualTour();
                }
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
        window.addEventListener('orientationchange', function() {
            setTimeout(() => {
                window.scrollTo(0, 0);
            }, 100);
        });
        
        console.log('‚úÖ –°–∞–π—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    }, 600);
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.showVirtualTour = showVirtualTour;
window.closeVirtualTour = closeVirtualTour;
window.openMap = openMap;
window.openNavigator = openNavigator;
window.closeModal = closeModal;